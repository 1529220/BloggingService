import java.awt.EventQueue;//EventQueue is a platform-independent class that queues events, both from the underlying peer classes and from trusted application classes.
import javax.swing.JFrame;//adds support for the JFC/Swing component architecture.
import net.miginfocom.swing.MigLayout;//MigLayout is a manager Layout that makes layout problems trivial
import javax.swing.JButton;//to be able to work with JButtons
import javax.swing.JTextField;//to be able to work with JTextField
import javax.swing.AbstractAction;//Standard behaviors like the get and set methods for Action object properties (icon, text, and enabled) are defined here
import java.awt.event.ActionEvent;//A semantic event which indicates that a component-defined action occurred. This high-level event is generated by a component (such as a Button) when the component-specific action occurs (such as being pressed). The event is passed to every ActionListener object that registered to receive such events using the component's addActionListener method.
import javax.swing.Action;// to be able to create action the the buttons
import javax.swing.DefaultListModel;//to be able to create a model list. this class notifies the ListDataListeners when changes, in the list created, occur.
import java.awt.event.ActionListener;//The listener interface for receiving action events. The class that is interested in processing an action event implements this interface, and the object created with that class is registered with a component, using the component's addActionListener method. When the action event occurs, that object's actionPerformed method is invoked.
import java.util.ArrayList;//to be able to work with ArrayList
import java.util.Calendar;//The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields  such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week. 
import javax.swing.JList;//to be able to work with JList
import javax.swing.JOptionPane;//to be able to work with JOptionPane
import javax.swing.JLabel;//to be able to work with JLabel
import javax.swing.JTextArea;//to be able to work with JTextArea
import java.awt.TextArea;//to be able to work with TextArea
import java.awt.SystemColor;//A class to encapsulate symbolic colors representing the color of native GUI objects on a system.

public class bloggingservice extends JFrame{

	private JFrame frame;
	private final Action action = new SwingAction();
	private JTextArea txtText;
	public JButton btnSave;
	private final Action action_1 = new SwingAction_1();
	private DefaultListModel<String> elements;
	private DefaultListModel<String> rightelements;
	private JLabel lblMessages;
	private TextArea text;
	private JButton Delete;
	private JList list;
	JTextField timeField; 
	int i=0;
	private JList list_1;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					bloggingservice window = new bloggingservice();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public bloggingservice() {
		initialize();
     }
	
	/**
	 * Initialize the contents of the frame.

	 */
	private void initialize() {
		
		frame = new JFrame();
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	
		frame.getContentPane().setLayout(new MigLayout("", "[grow][]", "[][][][][grow][]"));
	
		JButton btnNewMessage = new JButton("New Message");
		btnNewMessage.setAction(action);
		frame.getContentPane().add(btnNewMessage, "cell 0 0");
		

		btnSave = new JButton("SAVE");
		btnSave.setAction(action_1);
		elements = new DefaultListModel<String>();
		rightelements = new DefaultListModel<String>();
		
		long[] timecheck = new long[elements.capacity()];
		long[] yearcheck = new long[elements.capacity()];
		long[] monthcheck = new long[elements.capacity()];
		long[] datecheck = new long[elements.capacity()];
		
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
						
				 String newmessage = txtText.getText();
				 txtText.setText(null);
				 String timemessage = "";
				 if(newmessage.length()>150){
					 //errormessage.visible true;
					 errorMessage("Message too long(write less than 150 characters)\n click OK to continue" , "Error Message");
				 }
				 else if(newmessage.length()==0){
					 errorMessage("Message empty (write at least one character)\n click OK to continue" , "Error Message");
				 }else{ 
					 Delete = new JButton("Delete");
					 Delete.addActionListener(new ActionListener() {
					 public void actionPerformed(ActionEvent arg0) {
								
							}
						});
					 errorMessage("Message entered correctly! \n click OK to continue" , "Successful Message");
					 
					 for(int k = 0;k<newmessage.length();k++){
						 if(newmessage.charAt(k)=='\n'){
						 newmessage.replaceAll("\n", " ");
						 System.out.print(newmessage);
						 }
					 }
					 
					 long year = Calendar.getInstance().get(Calendar.YEAR);
					 yearcheck[i]=year;
					 long month = Calendar.getInstance().get(Calendar.MONTH);
					 monthcheck[i]=month;
					 long date = Calendar.getInstance().get(Calendar.DATE);
					 datecheck[i]=date;
					 long milliseconds= System.currentTimeMillis();
					 System.out.println("millis " + milliseconds);
					 timecheck[i]=milliseconds;
					 System.out.println("timecheck " + timecheck[0]);
					  System.out.println(newmessage + " " );
					  for(int k = 0;k<i+1;k++){
						  long yearpost = Calendar.getInstance().get(Calendar.YEAR) - yearcheck[i];
						  long monthpost = Calendar.getInstance().get(Calendar.YEAR) - monthcheck[i];
						  long datepost = Calendar.getInstance().get(Calendar.YEAR) - datecheck[i];
						  long timepost = System.currentTimeMillis() - timecheck[k];
						  if(yearpost!=0){
							  timemessage = ( yearpost + (yearpost == 1 ? " year ago": " years ago" ));
								 
							  System.out.println( yearpost + (yearpost == 1 ? " year ago": " years ago" ));
						  }
						  else if(monthpost!=0 && monthpost<=12){
							 timemessage = ( monthpost + (monthpost == 1 ? " month ago": " months ago" ));
								
							  System.out.println( monthpost + (monthpost == 1 ? " month ago": " months ago" ));
						  }
						  else if(datepost!=0 && datepost<=31){
							 timemessage = ( datepost + (datepost == 1 ? " day ago": " days ago" ));
								 
							  System.out.println( datepost + (datepost == 1 ? " day ago": " days ago" ));
						  }
						  else if(((timepost / (1000*60*60) % 24)<=23)&&(timepost / (1000*60*60) % 24)!=0){
							  timemessage = ( ((timepost / (1000*60*60)) % 24) + ((timepost / (1000*60*60) % 24) == 1 ? " hour ago": " hour ago" ));
								
							  System.out.println( ((timepost / (1000*60*60)) % 24) + ((timepost / (1000*60*60) % 24) == 1 ? " hour ago": " hour ago" ));
								}
						 else if((((timepost / (1000*60)) % 60)<=59)&&((timepost / (1000*60)) % 60)!=0){
							 timemessage = ( ((timepost / (1000*60)) % 60) + ((timepost/ (1000*60) % 60) == 1 ? " minute ago": " minutes ago" ));
									
							 System.out.println( ((timepost / (1000*60)) % 60) + ((timepost/ (1000*60) % 60) == 1 ? " minute ago": " minutes ago" ));
								}
						 else if((timepost/1000)%60<=59){
							timemessage = ((timepost / 1000) % 60 + ((timepost / 1000) % 60 == 1 ? " second ago": " seconds ago" ));	
							 System.out.println( (timepost / 1000) % 60 + ((timepost / 1000) % 60 == 1 ? " second ago": " seconds ago" ));
							}
						 else{
							 System.out.println("ERROR");
						 }
						  
						 rightelements.add(0, timemessage);
						 
						 System.out.println(rightelements);
					  }
					  
					 elements.add(0, newmessage);
					 
					 list.setModel(elements);
					 System.out.println("size" + rightelements.getSize());
					 if(elements.isEmpty()){
						 rightelements.clear();
						 list_1.setModel(rightelements);

					 }
					 if(i>0){
					 rightelements.removeRange(i+1, rightelements.getSize()-1);
					 }
					 list_1.setModel(rightelements);
					 
					 i++;
					 System.out.println();
				 }
			}
			
		});
		
		
		frame.getContentPane().add(btnSave, "cell 0 2");
		
		txtText = new JTextArea();
		txtText.setText("");
		frame.getContentPane().add(txtText, "cell 0 1,growx");
		txtText.setColumns(150);
		
		lblMessages = new JLabel("Messages");
		frame.getContentPane().add(lblMessages, "cell 0 3");
		Delete = new JButton("Delete");
		 Delete.addActionListener(new ActionListener() {
			 public void actionPerformed(ActionEvent e) {
				 
				 int index = list.getSelectedIndex();
				 int index_1 = index;
				 elements.remove(index);
				 rightelements.remove(index_1);
				 list.setModel(elements);
				 list_1.setModel(rightelements);
				    int size = elements.getSize();
				    int rightsize = rightelements.getSize();

				    if (size == 0) { 
				    	Delete.setEnabled(false);
				    	System.out.println("SIZE!!!" + size);

				    } else { //Select an index.
				        if (index == elements.getSize()) {
				            //removed item in last position
				            index--;
				            index_1--;
				        }
				    }
				        list.setSelectedIndex(index);
				        list.ensureIndexIsVisible(index);
				        list_1.setSelectedIndex(index_1);
				        list_1.ensureIndexIsVisible(index_1);
				    
				    errorMessage("Item Deleted" , "Success");
				    if(elements.isEmpty()){
						 rightelements.clear();
						 list_1.setModel(rightelements);
						 i--;

					 }
					}
					 
				});
		list = new JList();
		list.setBackground(SystemColor.control);
		frame.getContentPane().add(list, "flowx,cell 0 4,alignx left,growy");
		
		list_1 = new JList();
		list_1.setBackground(SystemColor.control);
		frame.getContentPane().add(list_1, "cell 1 4,alignx right,growy");
		
		frame.getContentPane().add(Delete, "cell 0 5");
		
		txtText.setVisible(false);
		btnSave.setVisible(false);
		lblMessages.setVisible(false);
	    Delete.setVisible(false); 
	}

	private class SwingAction extends AbstractAction {
		public SwingAction() {
			putValue(NAME, "New Message");
			putValue(SHORT_DESCRIPTION, "Enter New Message");
		}
		public void actionPerformed(ActionEvent e) {
			txtText.setVisible(true);
			btnSave.setVisible(true);
			Delete.setVisible(true);
			if(elements.isEmpty()){
				 rightelements.clear();
				 list_1.setModel(rightelements);

			 }
		}
	}
	private class SwingAction_1 extends AbstractAction {
		public SwingAction_1() {
			putValue(NAME, "SAVE");
			putValue(SHORT_DESCRIPTION, "Save Message");
		}
		public void actionPerformed(ActionEvent e) {
			lblMessages.setVisible(true);
			txtText.setVisible(false); 
		     if(elements.isEmpty()){
				 rightelements.clear();
				 list_1.setModel(rightelements);

			 }
			
		}
	}
	public static void errorMessage(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
	
	
}
